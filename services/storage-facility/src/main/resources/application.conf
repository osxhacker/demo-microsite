# @(#) Configuration for the Storage Facility microservice
#
# The settings defined here are in the HOCON format:
#
#   https://github.com/lightbend/config

# The idle-timeout parameter determines how long the HTTP server will
# wait for requests on an established connection.  This only is
# considered when multiple HTTP requests are possible with the same
# TCP connection.
#
# It must be between 10 seconds and 5 minutes.
idle-timeout = 5m

# The operations-slug parameter identifies for the service what
# company to use when performing internal operations.  This MUST
# be resolvable by the company repository at run-time.
operations-slug = "internal-devops"

# The quiescence-delay parameter determines how long the service will
# delay after being requested to stop.
quiescence-delay = 2s

# The deployment location indicating where the service is running.
# This will usually correlate with a symbolic name defined by a
# PaaS, such as "eu-west" or "us-east".
#
# see: https://github.com/lightbend/config#optional-system-or-env-variable-overrides
region = "local"
region = ${?REGION}

# The http section configures how the HTTP server binds to the network.
http {
	# The address property specifies what network address to bind to
	# when listening for service interactions.  Its format can be:
	#
	# - IPv4
	# - IPv6
	# - localhost
	# - a machine name
	#
	# The default is 'localhost' for a development environment.
    address = "localhost"
    port = 6890

	# All resources known to the microservice are made available
	# under the api path prefix.  Note that the api version is not
	# included in the path.  Incompatible versions are exposed on
	# different hostname's.
    api = "/api"
}

# The database section configures how to interact with the persistent
# store.
database {
    # PostgreSQL is the targeted database.
    driver = "org.postgresql.Driver"

    # The host name, port, and database name must correspond with
    # what is configured in the deployment environment.
    url = "jdbc:postgresql://localhost:6430/storage_facility"

    # What account to connect with.  This must exist in the
    # deployment environment.
    user = "storage_facility"

    # What password to connect with.  This must exist in the
    # deployment environment.
    password = "avocadoTOMATO"
}

# Kafka configuration.  Each microservice is expected to create
# the Kafka topics which is produces.  Kafka topic consumption
# must be resilient to the possibility of a desired topic not
# being available when first resolved and retry for some
# implementation defined period.
kafka {
    # What Kafka servers to initially connect to.  The string
    # must be a comma-separated list of "hostname:port" with
    # no spaces.
    servers = "localhost:9092"

    # The company section configures the Kafka topic which
    # contains Company integration events.
    company {
        # The default topic name is determined by the
        # microservice ("company" in this case).  Override if
        # a different channel name is needed.
        # topic = "alternate-name"

        # The number of partitions is only applicable when the
        # topic is initially created.
        number-of-partitions = 1

        # The replication factor controls how many servers will
        # replicate each message that is written. If you have a
        # replication factor of 3 then up to 2 servers can fail
        # before you will lose access to your data.
        #
        # source: https://kafka.apache.org/081/documentation.html
        replication-factor = 1
    }

    # The storage-facility section configures the Kafka topic which
    # contains StorageFacility integration events.
    storage-facility {
        # The default topic name is determined by the
        # microservice ("storage-facility" in this case).  Override
        # if a different channel name is needed.
        # topic = "alternate-name"

        # The number of partitions is only applicable when the
        # topic is initially created.
        number-of-partitions = 1

        # The replication factor controls how many servers will
        # replicate each message that is written. If you have a
        # replication factor of 3 then up to 2 servers can fail
        # before you will lose access to your data.
        #
        # source: https://kafka.apache.org/081/documentation.html
        replication-factor = 1
    }
}

# Kamon Prometheus configuration.  Without at least some of these
# settings, Prometheus metrics collection will not be enabled.
#
# See https://kamon.io/docs/latest/reporters/prometheus/
kamon {
    environment {
        service = "storage-facility"

        tags {
            service = "storage-facility"
        }
    }

    prometheus {
        include-environment-tags = true

        buckets {
            default-buckets = [
                10,
                30,
                100,
                300,
                1000,
                3000,
                10000,
                30000,
                100000
                ]

            time-buckets = [
                0.005,
                0.01,
                0.025,
                0.05,
                0.075,
                0.1,
                0.25,
                0.5,
                0.75,
                1,
                2.5,
                5,
                7.5,
                10
                ]

            information-buckets = [
                512,
                1024,
                2048,
                4096,
                16384,
                65536,
                524288,
                1048576
                ]
            }
        }
}
